# Server Configuration
PORT=4001
NODE_ENV=development

# JWT Configuration (MUST be the same in local and deployed environments)
JWT_SECRET=a1b2c3d4e5f67890abcd1234ef567890abcdef1234567890abcdef1234567890

# PostgreSQL Database Configuration (For local development)
DB_HOST=localhost
DB_PORT=5432
DB_NAME=logistics_db
DB_USER=postgres
DB_PASS=your_postgres_password

# Google Maps API Configuration (Required for enhanced address autocomplete)
# Replace YOUR_GOOGLE_MAPS_API_KEY_HERE with your actual Google Maps API key
# Get your API key from: https://console.cloud.google.com/apis/credentials
# Enable these APIs: Places API, Geocoding API, Maps JavaScript API
GOOGLE_MAPS_API_KEY=your_google_maps_api_key_here

# ============================================
# DEPLOYMENT CONFIGURATION (Render.com)
# ============================================
# For cloud deployments, use DATABASE_URL instead of individual DB_* variables
# Get this from your Render PostgreSQL database page (Internal Database URL)
# DATABASE_URL=postgresql://username:password@hostname:5432/database_name

# For Production Deployment on Render.com:
# 1. Create a PostgreSQL database on Render
# 2. Copy the Internal Database URL
# 3. Set these environment variables in Render:
#    - DATABASE_URL=<your-postgres-internal-url>
#    - PORT=4001
#    - NODE_ENV=production
#    - JWT_SECRET=a1b2c3d4e5f67890abcd1234ef567890abcdef1234567890abcdef1234567890
#    - FRONTEND_URL=https://logistics-fleet-management-ten.vercel.app

# ============================================
# LOCAL DEVELOPMENT INSTRUCTIONS
# ============================================
# 1. Copy this file to .env
# 2. Update DB_PASS with your actual PostgreSQL password
# 3. Ensure PostgreSQL is running on port 5432 (default port)
# 4. Create a database named 'logistics_db' in PostgreSQL
# 5. Run: npm run dev
